<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>アニャ様です！</title>
        <link>/</link>
        <description>アニャの記録</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>1091451551@qq.com (アニャ様)</managingEditor>
            <webMaster>1091451551@qq.com (アニャ様)</webMaster><lastBuildDate>Wed, 05 Oct 2022 15:55:13 &#43;0800</lastBuildDate>
            <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Socket网络编程之TCP</title>
    <link>/posts/thinking/socket%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B9%8Btcp/</link>
    <pubDate>Wed, 05 Oct 2022 15:55:13 &#43;0800</pubDate>
    <author>Author</author>
    <guid>/posts/thinking/socket%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B9%8Btcp/</guid>
    <description><![CDATA[Socket网络编程详解(TCP) 一、Socket的定义 套接字(Socket)，就是对网络中不同主机上的应用进程之间进行双向通信的端点的抽象]]></description>
</item>
<item>
    <title>Golang队列</title>
    <link>/posts/thinking/golang%E9%98%9F%E5%88%97/</link>
    <pubDate>Fri, 09 Sep 2022 10:14:33 &#43;0800</pubDate>
    <author>アニャ様</author>
    <guid>/posts/thinking/golang%E9%98%9F%E5%88%97/</guid>
    <description><![CDATA[package main import ( &#34;errors&#34; &#34;fmt&#34; &#34;os&#34; ) // 使用结构体管理队列 type Queue struct { Maxsize int array [5]int //数组 模拟队列 front int // 指向队列首部 rear int // 指向队列 尾部 } // 入队 func (q *Queue) Push(value int) (err error) { // 判断队列是]]></description>
</item>
<item>
    <title>每次更新hugo博客的操作</title>
    <link>/posts/thinking/%E6%AF%8F%E6%AC%A1%E6%9B%B4%E6%96%B0hugo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%93%8D%E4%BD%9C/</link>
    <pubDate>Wed, 07 Sep 2022 16:58:08 &#43;0800</pubDate>
    <author>アニャ様</author>
    <guid>/posts/thinking/%E6%AF%8F%E6%AC%A1%E6%9B%B4%E6%96%B0hugo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%93%8D%E4%BD%9C/</guid>
    <description><![CDATA[每次更新hugo博客所需的操作 打开 Powercmd / cmd 终端，打开最初用 hugo 搭建的博客所在的文件夹，以我为例： cd D:\Blog 第一步： 新建一个 markdown(.md) 格式的文件： hugo new post/FileName.md 其中 FileName 为]]></description>
</item>
<item>
    <title>Golang链表</title>
    <link>/posts/thinking/golang%E9%93%BE%E8%A1%A8/</link>
    <pubDate>Tue, 06 Sep 2022 20:58:55 &#43;0800</pubDate>
    <author>アニャ様</author>
    <guid>/posts/thinking/golang%E9%93%BE%E8%A1%A8/</guid>
    <description><![CDATA[package main import ( &#34;fmt&#34; ) type Node struct { data int next *Node } func SingleCreate(data int) *Node { return &amp;Node{ data: data, next: nil, } } //创建单个节点 func CreateList(lenth int) *Node { var head *Node = new(Node) head.data = 0 temp := head for i := 1; i &lt; lenth; i++ { node := new(Node) node.data = i temp.next = node]]></description>
</item>
<item>
    <title>MarkDown常用语法</title>
    <link>/posts/thinking/markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</link>
    <pubDate>Tue, 09 Aug 2022 01:43:34 &#43;0800</pubDate>
    <author>アニャ様</author>
    <guid>/posts/thinking/markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</guid>
    <description><![CDATA[1. 分级标题 一级 用 # 二级 用 ## &hellip; &hellip;(以此类推) 2. 段落 创建段落，请使用空白行将一行或多行文本进行分隔。 不要用空格（spaces）或制]]></description>
</item>
<item>
    <title>文件管理</title>
    <link>/posts/thinking/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</link>
    <pubDate>Sun, 24 Jul 2022 20:57:29 &#43;0800</pubDate>
    <author>アニャ様</author>
    <guid>/posts/thinking/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</guid>
    <description><![CDATA[C语言的文件管理部分内容 1. 从文件中逐个输入字符及向文件中逐个输出字符的顺序读写函数 fgetc 和 fputc 调整文件读写位置到文件开始处的函数 rewind 头文件：#inc]]></description>
</item>
<item>
    <title>Avl树</title>
    <link>/posts/coding/avl%E6%A0%91/</link>
    <pubDate>Mon, 21 Mar 2022 19:51:35 &#43;0800</pubDate>
    <author>Author</author>
    <guid>/posts/coding/avl%E6%A0%91/</guid>
    <description><![CDATA[Avl树 AVL树本质上还是一棵二叉搜索树，它的特点是： 本身首先是一棵二叉搜索树。 带有平衡条件：每个结点的左右子树的高度之差的绝对值（平衡因子]]></description>
</item>
<item>
    <title>字符串匹配算法</title>
    <link>/posts/coding/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/</link>
    <pubDate>Thu, 17 Mar 2022 20:35:40 &#43;0800</pubDate>
    <author>Author</author>
    <guid>/posts/coding/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/</guid>
    <description><![CDATA[#include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; //字符串匹配搜索算法BF、RK、BM、KMP /* * BF算法，暴力匹配算法（） * Rk算法，利用哈希函数将字符串转换成数字，比较哈希值，]]></description>
</item>
<item>
    <title>二叉树</title>
    <link>/posts/coding/%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
    <pubDate>Tue, 15 Mar 2022 10:42:40 &#43;0800</pubDate>
    <author>Author</author>
    <guid>/posts/coding/%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
    <description><![CDATA[binary tree 二叉树 #include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; //树节点 struct node { int data; struct node *left; struct node *right; }; struct node *newnode(int data) { struct node *node = (struct node *)malloc(sizeof(struct node)); node-&gt;data = data; node-&gt;left = NULL; node-&gt;right = NULL; return (node); } //树的遍历 //前序、中序、后序 void printPostorder(struct node]]></description>
</item>
<item>
    <title>无递归中序树栈遍历</title>
    <link>/posts/coding/%E6%97%A0%E9%80%92%E5%BD%92%E4%B8%AD%E5%BA%8F%E6%A0%91%E6%A0%88%E9%81%8D%E5%8E%86/</link>
    <pubDate>Tue, 21 Dec 2021 20:15:20 &#43;0800</pubDate>
    <author>Author</author>
    <guid>/posts/coding/%E6%97%A0%E9%80%92%E5%BD%92%E4%B8%AD%E5%BA%8F%E6%A0%91%E6%A0%88%E9%81%8D%E5%8E%86/</guid>
    <description><![CDATA[#include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #define bool int //树节点 struct tNode { int data; struct tNode *left; struct tNode *right; }; //堆栈 struct sNode { struct tNode *t; struct sNode *next; }; //堆栈相关函数 void push(struct sNode **top_ref , struct tNode *t); struct tNode *pop(struct sNode **top_ref); bool isEmpty(struct sNode *top); //迭代遍历顺]]></description>
</item>
</channel>
</rss>
